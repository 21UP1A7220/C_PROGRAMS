QUESTION1
Write a program to find whether the given two strings

ANSWER-1
int main() {
    char ch1[50],ch2[50];
    gets(ch1);
    gets(ch2);
    int i=strcmp(ch1,ch2);
    if(i==0)
        printf("Strings are same");
    else
        printf("Strings are not same");
    return 0;
}

QUESTION2
Write a program to find the concatenation of the given two strings

ANSWER-2
int main() {
    char ch1[50],ch2[50];
    gets(ch1);
    gets(ch2);
    
    printf("%s %s",ch1,ch2);
    return 0;
}



QUESTION-3
Write a program to change the given string to uppercase.

ANSWER-3
int main() {
    char ch1[50];
    int i;
    gets(ch1);
    for(i=0;ch1[i]!='\0';i++){
        if(ch1[i]>='a'&& ch1[i]<='z'){
            ch1[i]=ch1[i]-32;
        }
        
    }
    printf("%s",ch1);
   return 0;
}


QUESTION-4
Read a stirng and convert upper case into lower case and vice versa

ANSWER-4
int main() {
    char ch1[50];
    int i;
    gets(ch1);
    for(i=0;ch1[i]!='\0';i++){
        if(ch1[i]>='a'&& ch1[i]<='z'){
            ch1[i]=ch1[i]-32;
        }
        else if(ch1[i]>='A'&& ch1[i]<='Z'){
            ch1[i]=ch1[i]+32;
        }
    }
    printf("%s",ch1);   
    return 0;
}


QUESTION-5
Write a program to find whether the given string is a palindrome or not

ANSWER-5
int main() {
    char ch1[50],ch2[50];
    int i,j,n,temp;
    gets(ch1);
       strcpy(ch2,ch1);

    for(i=0;ch1[i]!='\0';i++) ;
        n=i;
    i=0;
    j=n-1;
    while(i<j){
        temp=ch1[i];
        ch1[i]=ch1[j];
        ch1[j]=temp;
        i++;
        j--;
    }
   
     i=strcmp(ch1,ch2);
    if(i==0)
        printf("Palindrome");
    else
        printf("Not a Palindrome");
   return 0;
}



QUESTION-6
Write a program to count the number of vowels in the given string.

ANSWER-6
int main() {
    int i=0,count=0;
  char ch[50];
  
  gets(ch);

  while(ch[i]!='\0') {
    if(ch[i]=='a'||ch[i]=='A'||ch[i]=='e'||ch[i]=='E'||ch[i]=='i'||ch[i]=='I'||ch[i]=='o'||ch[i]=='O'||ch[i]=='u'||ch[i] == 'U')
      count++;
    i++;
  }
  printf("%d", count);
    return 0;
}


QUESTION-7
Write a program to sort the given string.

ANSWER-7
int main() {
    char ch[100],temp;
 int i, j;
    gets(ch);
   int n = strlen(ch);
   for(i=0;i< n-1;i++) {
      for(j=i+1;j<n;j++) {
         if(ch[i] > ch[j]) {
            temp = ch[i];
            ch[i] = ch[j];
            ch[j] = temp;
         }
      }
   }
   
   printf("%s", ch);
    return 0;
}


QUESTION-8
Write a program to delete the vowels in the given string and display the string without vowels.

ANSWER-8
int main() {
    int i=0,n,j;
  char ch[50];
  
  gets(ch);
n=strlen(ch);
    for(i=0;i<n;i++)
  {
    if(ch[i]=='a'||ch[i]=='A'||ch[i]=='e'||ch[i]=='E'||ch[i]=='i'||ch[i]=='I'||ch[i]=='o'||ch[i]=='O'||ch[i]=='u'||ch[i] == 'U')
    {
        for(j=i;j<n;j++){
            ch[j]=ch[j+1];
        }
        i--;
        n--;
    }
        ch[n+1]='\0';
    }
    
 printf("%s",ch);
   return 0;
}



QUESTION-9
Given a string containing alphanumeric characters, calculate the sum of all numbers present in the string.

ANSWER-9
int main() {
    char ch[100];
    int i,sum=0;
 gets(ch);
    for(i=0;ch[i]!='\0';i++)
    {
        if ((ch[i]>='0') && (ch[i]<='9'))
        {
            sum=sum+(ch[i]-'0');
        }
    }
    printf("%d", sum);
    return 0;
}


QUESTION-10
These days kids are introduced to computers at a very early age. The kids are taught about alphabets, digits and blank spaces. The teacher asked the students to count the vowels, consonants, digits and white spaces in a string. The teacher found it a bit difficult to evaluate these tests and she knew that the 12th class students are learning C programming. So she assigned this task to them to count the vowels, consonants, digits and white spaces in a string. Can you please help them out? Write a program to count the vowels, consonants, digits, white spaces, and symbols in a string.

ANSWER-10
int main() {
    char ch[200];
    int i,v=0,c=0,s=0,d=0,sy=0,l;
    gets(ch);
    l=strlen(ch);
    for(i=0;i<l;i++){
        if(ch[i]>=65&&ch[i]<=90 || ch[i]>=97&&ch[i]<=122){
           if(ch[i]=='a'||ch[i]=='e'||ch[i]=='i'||ch[i]=='o'||ch[i]=='u'||ch[i]=='A'||ch[i]=='E'||ch[i]=='I'||ch[i]=='O'||ch[i]=='U'){
               v++;
           }
            else{
                c++;
            }
        }
        if(ch[i]>=48&&ch[i]<=57){
            d++;
        }
        if(ch[i]==' '){
            s++;
        }
        if(!((ch[i]>=65&&ch[i]<=90)||(ch[i]>=97&&ch[i]<=122)||(ch[i]>=48&&ch[i]<=57)||(ch[i]==' '))){
            sy++;
        }
      
    }
    printf("Vowels:%d\n",v);
    printf("Consonants:%d\n",c);
    printf("White Spaces:%d\n",s);
    printf("Digits:%d\n",d);
    printf("Symbols:%d",sy);
    return 0;
}


QUESTION-11
In a blind organization, they were playing the typing a keyword game and they want to correct the form of the word. So help them to by writing a program to remove all special symbols and print the characters of a string.

ANSWER-11
int main() {
    char ch[200];
    gets(ch);
    int i,n,j;
    n=strlen(ch);
     for(i=0;i<n;i++)
  {
    if(!((ch[i]>=65&&ch[i]<=90)||(ch[i]>=97&&ch[i]<=122)||(ch[i]==' ')))
    {
        for(j=i;j<n;j++){
            ch[j]=ch[j+1];
        }
        i--;
        n--;
    }
        ch[n+1]='\0';
    }
    
 printf("%s",ch);
     return 0;
}



QUESTION-12
Accept string from the user and display only those characters which are present at an even index

ANSWER-12
int main() {
    char ch[100];
    int i,n;
    gets(ch);
    n=strlen(ch);
    for(i=0;i<n;i++){
        if(i%2==0)
            printf("%d %c\n",i,ch[i]);
    }
    return 0;
}


QUESTION-13
Given a string S(input consisting) of ‘’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘’ or ‘#’ to make it a valid string. The string is considered valid if the number of ‘’ and ‘#’ are equal. The ‘’ and ‘#’ can be at any position in the string.

Input Format

ANSWER-13
int main() {
    char s[50];
    int i,n,a=0,h=0;
    gets(s);
    n=strlen(s);
    for(i=0;i<n;i++){
        if(s[i]=='*')
            a++;
        if(s[i]=='#')
            h++;
    }
    if(a>h){
        printf("%d",a-h);
    }
    else if(h>a){
        printf("%d",a-h);
    }
    else{
        printf("0");
    }
    return 0;
}


QUESTION-14
SecretMessage agency provides message encoding and decoding services for secure data transfer. The first step in decoding includes removal of special characters and the whitespaces from the message, as special characters and whitespaces do not hold any meaning. Write an algorithm to help the agency find the number of special characters and whitespaces in a given message.

ANSWER-14
int main() {
    char ch[200];
    gets(ch);
    int i,n,count=0;
    n=strlen(ch);
    for(i=0;i<n;i++){
        if(!((ch[i]>=65&&ch[i]<=90)||(ch[i]>=97&&ch[i]<=122)||(ch[i]>=48&&ch[i]<=57||(ch[i]==' '))))
            count++;
    }
    printf("%d",count);
    return 0;
}



QUESTION-15
The delivery requests of an e-commerce website are depicted in the form of strings tagged ‘a-z’ or ‘A-Z’. Each character of the string represents the number of products that need to be delivered for that respective code. Due to limited delivery windows the website has decided to deliver the products whose codes represents the largest and the smallest values in the string. The company needs to find out the total number of products delivered. Write an algorithm to find out the total number of products delivered.

Input Format

ANSWER-15
int main() {
    char ch[50];
    int i,n,sum=0,max,min;
    gets(ch);
    n=strlen(ch);
    for(i=0;i<n;i++){
        if(ch[i]>=65 && ch[i]<=90 || ch[i]>=97 &&ch[i]<=122){
            if(min>ch[i]){
                 min=ch[i];
            }
        }
              if(max<ch[i]){
                  max=ch[i];
              }
          }
        sum=sum+min+max;
        printf("%d",sum);
       return 0;
}

QUESTION-16
An English school teacher is teaching how to build sentences for kindergarten students. She starts by teaching two words in a sentence, then 3 words and so on. The next step is that she asks the students to find which word in the sentence they have made has the maximum number of alphabets. The task here is to write program to find the longest word in each input sentence(str).

ANSWER-16
int main() {
    char ch[100];
 int count=0,max,i,j,index=0,n;
 gets(ch);
 n=strlen(ch);
 index=0;
 for(i=0;i<n;i++)
 {
  if(ch[i]!=' ')
  {
   count++;
  }
  else
  {
   if(count>max)
   {
    max=count;
    index=i-max;
   }
   count=0;
  }
 
 if(count>max)
 {
  max=count;
 }
 }
 printf("%d",max);
    return 0;
}


